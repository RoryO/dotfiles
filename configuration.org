#+TITLE Configuration
* Initial package installation
** Setup remote package sources
   #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (package-initialize)
   #+END_SRC
** Install use-package if not present
   #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
   #+END_SRC
** Define desired packages in alphabetical order
   #+BEGIN_SRC emacs-lisp
(use-package ag :ensure t)
(use-package column-marker :ensure t :config (column-marker-1 120))
(use-package company :ensure t :config (global-company-mode))
(use-package evil :ensure t :config (evil-mode 1))
(use-package flycheck :ensure t :config (global-flycheck-mode))
(use-package helm :ensure t :config (rto/helm-bindings))
(use-package inf-ruby :ensure t :config
  (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
  (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
)
(use-package magit :ensure t :config (rto/magit-bindings))
(use-package org :ensure t)
(use-package projectile :ensure t :config
  (projectile-mode)
  (use-package projectile-rails :ensure t :config (projectile-rails-global-mode)))
(use-package relative-line-numbers :ensure t :config (global-relative-line-numbers-mode))
(use-package robe :ensure t :config (add-hook 'enh-ruby-mode-hook 'robe-mode))
(use-package slim-mode :ensure t)
(use-package solarized-theme :ensure t :config (load-theme 'solarized-dark t))
(use-package web-mode :ensure t)
(use-package yaml-mode :ensure t)
(use-package enh-ruby-mode :ensure t :config
    (add-to-list 'auto-mode-alist
		 '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
)
   
   #+END_SRC
* Utility functions

* Behavior configuration
** Tab taming
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(setq-default tab-stop-list (number-sequence 2 120 2))
#+END_SRC
  
* Evil bindings
** General
   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
   #+END_SRC
** Helm
  #+BEGIN_SRC emacs-lisp
  (defun rto/helm-bindings ()
    (evil-ex-define-cmd "bls" 'helm-buffers-list)
    (evil-ex-define-cmd "[me]ta" 'helm-M-x))
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
  (defun rto/magit-bindings ()
    (evil-ex-define-cmd "[Gp]ush" 'magit-push-implicitly)
    (evil-ex-define-cmd "[Gs]tatus" 'magit-status)
    (evil-ex-define-cmd "[Gc]ommit" 'magit-commit))
  #+END_SRC
* OS-specific configuration
  #+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Inconsolata")
  (set-face-attribute 'default nil :height 240)
)

(when (eq system-type 'windows-nt)
  (set-face-attribute 'default nil :family "Consolas")
  (set-face-attribute 'default nil :height 180)
)
  #+END_SRC
