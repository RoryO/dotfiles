#+TITLE Configuration

* Initial package installation
** Setup remote package sources
   #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (package-initialize)
    ;(package-refresh-contents)
   #+END_SRC
** Install use-package if not present
   #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
   #+END_SRC
*
** Define desired packages in alphabetical order
   #+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t :config
  (use-package all-the-icons-dired :ensure t :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  )
)
(use-package chruby :ensure t :mode "\\.rb\\'")
(use-package company :ensure t :config
  (use-package company-quickhelp :ensure t)
  (global-company-mode)
  (company-quickhelp-mode)
)
(use-package evil
  :ensure t
  :init
    (setq evil-want-keybinding nil)
  :config
    (evil-mode 1))
(use-package evil-collection :after evil :ensure t :config
  (setq evil-collection-company-use-tng nil)
  (evil-collection-init)
)
(use-package evil-matchit :ensure t)
(use-package evil-surround :ensure t :config (global-evil-surround-mode 1))
(use-package flycheck :ensure t :config
  (global-flycheck-mode)
)
(use-package hcl-mode :ensure t :mode "\\.tf\\'")
(use-package helm :ensure t :config
  (use-package helm-company :ensure t)
  (use-package helm-projectile :ensure t)
  (helm-mode)
)
(use-package inf-ruby :ensure t :mode "\\.rb\\'" :config
  (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
  (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
)
(use-package lsp-mode :ensure t
  :hook (prog-mode . lsp)
  :config
  (use-package lsp-ui :ensure t :config
    (setq lsp-prefer-flymake nil)
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  )
  (use-package company-lsp :ensure t :config
    (push 'company-lsp company-backends)
  )
)
(use-package magit :ensure t)
(use-package markdown-mode :mode "\\.md\\'" :ensure t)
(use-package monokai-theme :ensure t :config
  (load-theme 'monokai t)
)
(use-package nlinum-relative :ensure t :config
  (add-hook 'prog-mode-hook 'nlinum-relative-mode)
  (nlinum-relative-setup-evil)
)
(use-package projectile :ensure t :config
  (projectile-mode)
)
(use-package rainbow-delimiters :ensure t :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
)
(use-package rg :ensure t)
(use-package robe :mode "\\.rb\\'" :ensure t :config
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (push 'company-robe company-backends)
)
(use-package slim-mode :mode "\\.slim\\'" :ensure t)
(use-package spaceline :ensure t :config
  (spaceline-emacs-theme)
  (spaceline-helm-mode)
)
(use-package tide :ensure t
  :after (typescript-mode company flycheck)
  :hook (
    (typescript-mode . tide-setup)
    (typescript-mode . tide-hl-identifier-mode)
    (before-save . tide-format-before-save)
  )
)
(use-package web-mode :defer t :ensure t :config
  (add-to-list 'auto-mode-alist '("\\.js[x]\\'" . web-mode))
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
)
(use-package writegood-mode :ensure t)
(use-package yaml-mode :mode "\\.yml\\'" :ensure t)
(use-package yasnippet :ensure t)
(use-package enh-ruby-mode :mode "\\.rb\\'" :ensure t :config
    (add-to-list 'auto-mode-alist
		 '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
)
   #+END_SRC
* Utility functions

* Behavior configuration
** Initial server
#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p) (server-start))
#+END_SRC
** Temp file taming
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.emacs_saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC
** Row and column visualization
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Tab taming
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-stop-list (number-sequence 2 120 2))
(setq-default js-indent-level 2)
(setq web-mode-markup-indent-offset 2)
(setq ruby-deep-indent-paren nil)
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(setq projectile-enable-caching t)
#+END_SRC

** Scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Org Mode
   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   (setq org-directory "~/Dropbox/Documents/Notes")
   (setq org-default-notes-file (concat org-directory "capture.org"))
   #+END_SRC
** Dired taming
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+END_SRC
** Disable blink
#+BEGIN_SRC emacs-lisp
  '(blink-cursor-mode nil)
#+END_SRC
** Wrap on full words
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
** RSpec mode
   #+BEGIN_SRC emacs-lisp
(setq-default rspec-use-chruby t)
   #+END_SRC
** Remove trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Always refresh buffers
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Open files directly from symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** Change yes-no to y-n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Turn off downcasing from company
#+BEGIN_SRC emacs-lisp
(setq-default company-dabbrev-downcase nil)
(setq-default company-dabbrev-ignore-case t)
(setq-default company-dabbrev-code-ignore-case t)
(setq-default company-irony-ignore-case 'smart)
(setq completion-ignore-case 1)
#+END_SRC
** Company accept autocomplete on keypress
#+BEGIN_SRC emacs-lisp
(setq-default company-auto-complete t)
#+END_SRC
** Company delay before auto complete
#+BEGIN_SRC emacs-lisp
(setq-default company-idle-delay 0.1)
#+END_SRC
* Evil
** Config
#+BEGIN_SRC emacs-lisp
(setq-default evil-shift-width 2)
#+END_SRC
** Bindings
*** General
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(evil-define-minor-mode-key 'normal 'robe-mode "C-:" 'robe-jump)
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "bls" 'helm-buffers-list)
(evil-ex-define-cmd "[me]ta" 'helm-M-x)
(define-key evil-insert-state-map (kbd "C-k") 'helm-company)
(define-key evil-normal-state-map (kbd "C-j") 'helm-buffers-list)
(global-set-key (kbd "M-x") 'helm-M-x)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "[Gp]ush" 'magit-push-implicitly)
(evil-ex-define-cmd "[Gs]tatus" 'magit-status)
(evil-ex-define-cmd "[Gc]ommit" 'magit-commit)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "ff" 'helm-projectile)
(evil-ex-define-cmd "prg" 'rg-project)
#+END_SRC

*** Leader setup
#+BEGIN_SRC emacs-lisp
(defvar ro/leader-map (make-sparse-keymap))
(define-key evil-normal-state-map (kbd "SPC") ro/leader-map)
(define-key ro/leader-map (kbd "b") 'helm-buffers-list)
(define-key ro/leader-map (kbd "f") 'helm-projectile)
(define-key ro/leader-map (kbd "w") 'save-buffer)
#+END_SRC
** Major mode disable
   #+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'artist-mode 'emacs)
   #+END_SRC
* OS-specific configuration
  #+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Inconsolata")
  (set-face-attribute 'default nil :height 240)
)

(when (eq system-type 'windows-nt)
  (set-face-attribute 'default nil :family "Consolas")
  (set-face-attribute 'default nil :height 180)
  (setq markdown-command "pandoc")
)

(when (eq system-type 'gnu/linux)
  (set-face-attribute 'default nil :height 180)
)
  #+END_SRC
