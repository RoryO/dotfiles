#+TITLE Configuration
* Initial package installation
** Setup remote package sources
   #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
    (package-initialize)
    (package-refresh-contents)
   #+END_SRC
** Install use-package if not present
   #+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
   #+END_SRC
** Define desired packages in alphabetical order
   #+BEGIN_SRC emacs-lisp
(use-package ag :ensure t)
(use-package chruby :ensure t)
(use-package column-marker :ensure t :config (column-marker-1 120))
(use-package company :ensure t :config (global-company-mode))
(use-package evil :ensure t :config (evil-mode 1))
(use-package evil-org :ensure t)
(use-package flycheck :ensure t :config (global-flycheck-mode))
(use-package helm :ensure t :config)
(use-package inf-ruby :ensure t :config
  (autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process" t)
  (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
)
(use-package magit :ensure t :config)
(use-package markdown-mode :ensure t)
(use-package org :ensure t)
(use-package projectile :ensure t :config
  (projectile-mode)
  (use-package projectile-rails :ensure t :config (projectile-rails-global-mode)))
(use-package linum-relative :ensure t :config (linum-relative-global-mode))
(use-package robe :ensure t :config 
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (push 'company-robe company-backends))
(use-package rspec-mode :ensure t)
(use-package slim-mode :ensure t)
(use-package solarized-theme :ensure t :config (load-theme 'solarized-dark t))
(use-package web-mode :ensure t)
(use-package yaml-mode :ensure t)
(use-package enh-ruby-mode :ensure t :config
    (add-to-list 'auto-mode-alist
		 '("\\(?:\\.rb\\|ru\\|rake\\|thor\\|jbuilder\\|gemspec\\|podspec\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . enh-ruby-mode))
)
   #+END_SRC
* Utility functions

* Behavior configuration
** Initial server
#+BEGIN_SRC emacs-lisp
(unless (server-running-p) (server-start))
#+END_SRC
** Temp file taming
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.emacs_saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+END_SRC
** Row and column visualization
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Tab taming
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq-default tab-stop-list (number-sequence 2 120 2))
(setq-default js-indent-level 2)
(setq web-mode-markup-indent-offset 2)
#+END_SRC
  
** Projectile
#+BEGIN_SRC emacs-lisp
(setq projectile-enable-caching t)
#+END_SRC

** Scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode nil)
#+END_SRC
** Org Mode
   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
   (setq org-directory "~/Dropbox/Documents/Notes")
   (setq org-default-notes-file (concat org-directory "capture.org"))
   #+END_SRC
** Dired taming
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
** Disable blink
#+BEGIN_SRC emacs-lisp
  '(blink-cursor-mode nil)
#+END_SRC
** Wrap on full words
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC
* Evil 
** Config
#+BEGIN_SRC emacs-lisp
(setq-default evil-shift-width 2)
#+END_SRC
** Bindings
*** General
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC

*** Helm
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "bls" 'helm-buffers-list)
(evil-ex-define-cmd "[me]ta" 'helm-M-x)
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "[Gp]ush" 'magit-push-implicitly)
(evil-ex-define-cmd "[Gs]tatus" 'magit-status)
(evil-ex-define-cmd "[Gc]ommit" 'magit-commit)
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
(evil-ex-define-cmd "[Pf]ile" 'projectile-find-file)
(evil-ex-define-cmd "Ag" 'projectile-ag)
#+END_SRC
*** Projectile-Rails
#+BEGIN_SRC emacs-lisp
;; Projectile Rails find actions.

(evil-ex-define-cmd "Emodel"      'projectile-rails-find-model)
(evil-ex-define-cmd "ECmodel"     'projectile-rails-find-current-model)
(evil-ex-define-cmd "Econtroller" 'projectile-rails-find-controller)
(evil-ex-define-cmd "ECcontroller" 'projectile-rails-find-current-controller)
(evil-ex-define-cmd "Eview"       'projectile-rails-find-view)
(evil-ex-define-cmd "ECview"      'projectile-rails-find-current-view)
(evil-ex-define-cmd "Ehelper"     'projectile-rails-find-helper)
(evil-ex-define-cmd "EChelper"    'projectile-rails-find-current-helper)
(evil-ex-define-cmd "Elib"        'projectile-rails-find-lib)
(evil-ex-define-cmd "Efeature"    'projectile-rails-find-feature)
(evil-ex-define-cmd "Espec"       'projectile-rails-find-spec)
(evil-ex-define-cmd "ECspec"      'projectile-rails-find-current-spec)
(evil-ex-define-cmd "Etest"       'projectile-rails-find-test)
(evil-ex-define-cmd "ECtest"      'projectile-rails-find-current-test)
(evil-ex-define-cmd "Emigration"  'projectile-rails-find-migration)
(evil-ex-define-cmd "ECmigration" 'projectile-rails-find-current-migration)
(evil-ex-define-cmd "Efixture"    'projectile-rails-find-fixture)
(evil-ex-define-cmd "ECfixture"   'projectile-rails-find-current-fixture)
(evil-ex-define-cmd "Ejavascript" 'projectile-rails-find-javascript)
(evil-ex-define-cmd "Estylesheet" 'projectile-rails-find-stylesheet)
(evil-ex-define-cmd "Elog"        'projectile-rails-find-log)
(evil-ex-define-cmd "Einitializer" 'projectile-rails-find-initializer)
(evil-ex-define-cmd "Eenv"        'projectile-rails-find-environment)
(evil-ex-define-cmd "Elocale"     'projectile-rails-find-locale)
(evil-ex-define-cmd "Emailer"     'projectile-rails-find-mailer)
(evil-ex-define-cmd "Elayout"     'projectile-rails-find-layout)

;; Projectile Rails general actions.

(evil-ex-define-cmd "Rconsole"    'projectile-rails-console)
(evil-ex-define-cmd "Rserver"     'projectile-rails-server)
(evil-ex-define-cmd "Rrake"       'projectile-rails-rake)
(evil-ex-define-cmd "Rgenerate"   'projectile-rails-generate)
(evil-ex-define-cmd "Rextract"    'projectile-rails-extract-region)

;; Projectile Rails go-to actions.

(evil-ex-define-cmd "RGfile"      'projectile-rails-goto-file-at-point)
(evil-ex-define-cmd "RGgemfile"   'projectile-rails-goto-gemfile)
(evil-ex-define-cmd "RGroutes"    'projectile-rails-goto-routes)
(evil-ex-define-cmd "RGschema"    'projectile-rails-goto-schema)
(evil-ex-define-cmd "RGspechelper" 'projectile-rails-goto-spec-helper)
  #+END_SRC
* OS-specific configuration
  #+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (set-face-attribute 'default nil :family "Inconsolata")
  (set-face-attribute 'default nil :height 240)
)

(when (eq system-type 'windows-nt)
  (set-face-attribute 'default nil :family "Consolas")
  (set-face-attribute 'default nil :height 180)
  (setq markdown-command "pandoc")
)
  #+END_SRC
